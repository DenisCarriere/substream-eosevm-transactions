"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatIssues = exports.formatIssue = exports.formatError = void 0;
var Option = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Option"));
var ReadonlyArray = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/ReadonlyArray"));
var AST = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./AST.js"));
var TreeFormatter = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./TreeFormatter.js"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @since 1.0.0
 */

const go = (e, path = []) => {
  const _tag = e._tag;
  switch (_tag) {
    case "Type":
      return [{
        _tag,
        path,
        message: TreeFormatter.formatTypeMessage(e)
      }];
    case "Forbidden":
      return [{
        _tag,
        path,
        message: TreeFormatter.formatForbiddenMessage(e)
      }];
    case "Unexpected":
      return [{
        _tag,
        path,
        message: `is unexpected, expected ${AST.format(e.ast, true)}`
      }];
    case "Missing":
      return [{
        _tag,
        path,
        message: "is missing"
      }];
    case "Union":
      return Option.match(TreeFormatter.getMessage(e.ast, e.actual), {
        onNone: () => ReadonlyArray.flatMap(e.errors, e => {
          switch (e._tag) {
            case "Member":
              return go(e.error, path);
            default:
              return go(e, path);
          }
        }),
        onSome: message => [{
          _tag,
          path,
          message
        }]
      });
    case "Tuple":
      return Option.match(TreeFormatter.getMessage(e.ast, e.actual), {
        onNone: () => ReadonlyArray.flatMap(e.errors, index => go(index.error, [...path, index.index])),
        onSome: message => [{
          _tag,
          path,
          message
        }]
      });
    case "TypeLiteral":
      return Option.match(TreeFormatter.getMessage(e.ast, e.actual), {
        onNone: () => ReadonlyArray.flatMap(e.errors, key => go(key.error, [...path, key.key])),
        onSome: message => [{
          _tag,
          path,
          message
        }]
      });
    case "Transform":
      return Option.match(TreeFormatter.getTransformMessage(e, e.actual), {
        onNone: () => go(e.error, path),
        onSome: message => [{
          _tag,
          path,
          message
        }]
      });
    case "Refinement":
      return Option.match(TreeFormatter.getRefinementMessage(e, e.actual), {
        onNone: () => go(e.error, path),
        onSome: message => [{
          _tag,
          path,
          message
        }]
      });
    case "Declaration":
      return Option.match(TreeFormatter.getMessage(e.ast, e.actual), {
        onNone: () => go(e.error, path),
        onSome: message => [{
          _tag,
          path,
          message
        }]
      });
  }
};
/**
 * @category formatting
 * @since 1.0.0
 */
const formatIssues = issues => ReadonlyArray.flatMap(issues, e => go(e));
/**
 * @category formatting
 * @since 1.0.0
 */
exports.formatIssues = formatIssues;
const formatIssue = error => formatIssues([error]);
/**
 * @category formatting
 * @since 1.0.0
 */
exports.formatIssue = formatIssue;
const formatError = error => formatIssue(error.error);
exports.formatError = formatError;
//# sourceMappingURL=ArrayFormatter.js.map