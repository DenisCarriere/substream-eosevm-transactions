"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.declaration = exports.ParseError = void 0;
Object.defineProperty(exports, "decode", {
  enumerable: true,
  get: function () {
    return _Parser.decode;
  }
});
Object.defineProperty(exports, "decodeUnknown", {
  enumerable: true,
  get: function () {
    return _Parser.decodeUnknown;
  }
});
Object.defineProperty(exports, "decodeUnknownEither", {
  enumerable: true,
  get: function () {
    return _Parser.decodeUnknownEither;
  }
});
Object.defineProperty(exports, "decodeUnknownOption", {
  enumerable: true,
  get: function () {
    return _Parser.decodeUnknownOption;
  }
});
Object.defineProperty(exports, "decodeUnknownPromise", {
  enumerable: true,
  get: function () {
    return _Parser.decodeUnknownPromise;
  }
});
Object.defineProperty(exports, "decodeUnknownSync", {
  enumerable: true,
  get: function () {
    return _Parser.decodeUnknownSync;
  }
});
exports.eitherOrUndefined = void 0;
Object.defineProperty(exports, "encode", {
  enumerable: true,
  get: function () {
    return _Parser.encode;
  }
});
Object.defineProperty(exports, "encodeUnknown", {
  enumerable: true,
  get: function () {
    return _Parser.encodeUnknown;
  }
});
Object.defineProperty(exports, "encodeUnknownEither", {
  enumerable: true,
  get: function () {
    return _Parser.encodeUnknownEither;
  }
});
Object.defineProperty(exports, "encodeUnknownOption", {
  enumerable: true,
  get: function () {
    return _Parser.encodeUnknownOption;
  }
});
Object.defineProperty(exports, "encodeUnknownPromise", {
  enumerable: true,
  get: function () {
    return _Parser.encodeUnknownPromise;
  }
});
Object.defineProperty(exports, "encodeUnknownSync", {
  enumerable: true,
  get: function () {
    return _Parser.encodeUnknownSync;
  }
});
exports.union = exports.unexpected = exports.typeLiteral = exports.type = exports.tuple = exports.try = exports.transform = exports.succeed = exports.refinement = exports.parseError = exports.orElse = exports.missing = exports.member = exports.mapError = exports.mapBoth = exports.map = exports.key = exports.index = exports.forbidden = exports.flatMap = exports.fail = void 0;
var _Data = /*#__PURE__*/require("effect/Data");
var Effect = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Effect"));
var Either = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Either"));
var _Function = /*#__PURE__*/require("effect/Function");
var Inspectable = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("effect/Inspectable"));
var InternalParser = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./internal/parser.js"));
var TreeFormatter = /*#__PURE__*/_interopRequireWildcard( /*#__PURE__*/require("./TreeFormatter.js"));
var _Parser = /*#__PURE__*/require("./Parser.js");
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 */
class ParseError extends (0, _Data.TaggedError)("ParseError") {
  get message() {
    return this.toString();
  }
  /**
   * @since 1.0.0
   */
  toString() {
    return TreeFormatter.formatIssue(this.error);
  }
  /**
   * @since 1.0.0
   */
  toJSON() {
    return {
      _id: "ParseError",
      message: this.toString()
    };
  }
  /**
   * @since 1.0.0
   */
  [Inspectable.NodeInspectSymbol]() {
    return this.toJSON();
  }
}
/**
 * @category constructors
 * @since 1.0.0
 */
exports.ParseError = ParseError;
const parseError = issue => new ParseError({
  error: issue
});
/**
 * @category constructors
 * @since 1.0.0
 */
exports.parseError = parseError;
const succeed = exports.succeed = Either.right;
/**
 * @category constructors
 * @since 1.0.0
 */
const fail = exports.fail = Either.left;
const _try = exports.try = Either.try;
/**
 * @category constructors
 * @since 1.0.0
 */
const transform = exports.transform = InternalParser.transform;
/**
 * @category constructors
 * @since 1.0.0
 */
const type = exports.type = InternalParser.type;
/**
 * @category constructors
 * @since 1.0.0
 */
const forbidden = exports.forbidden = InternalParser.forbidden;
/**
 * @category constructors
 * @since 1.0.0
 */
const declaration = exports.declaration = InternalParser.declaration;
/**
 * @category constructors
 * @since 1.0.0
 */
const refinement = exports.refinement = InternalParser.refinement;
/**
 * @category constructors
 * @since 1.0.0
 */
const tuple = (ast, actual, errors) => ({
  _tag: "Tuple",
  ast,
  actual,
  errors
});
/**
 * @category constructors
 * @since 1.0.0
 */
exports.tuple = tuple;
const typeLiteral = exports.typeLiteral = InternalParser.typeLiteral;
/**
 * @category constructors
 * @since 1.0.0
 */
const index = exports.index = InternalParser.index;
/**
 * @category constructors
 * @since 1.0.0
 */
const key = exports.key = InternalParser.key;
/**
 * @category constructors
 * @since 1.0.0
 */
const missing = exports.missing = InternalParser.missing;
/**
 * @category constructors
 * @since 1.0.0
 */
const unexpected = exports.unexpected = InternalParser.unexpected;
/**
 * @category constructors
 * @since 1.0.0
 */
const union = exports.union = InternalParser.union;
/**
 * @category constructors
 * @since 1.0.0
 */
const member = exports.member = InternalParser.member;
/**
 * @category optimisation
 * @since 1.0.0
 */
const eitherOrUndefined = exports.eitherOrUndefined = InternalParser.eitherOrUndefined;
/**
 * @category optimisation
 * @since 1.0.0
 */
const flatMap = exports.flatMap = InternalParser.flatMap;
/**
 * @category optimisation
 * @since 1.0.0
 */
const map = exports.map = InternalParser.map;
/**
 * @category optimisation
 * @since 1.0.0
 */
const mapError = exports.mapError = InternalParser.mapError;
/**
 * @category optimisation
 * @since 1.0.0
 */
const mapBoth = exports.mapBoth = /*#__PURE__*/(0, _Function.dual)(2, (self, options) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return Either.left(options.onFailure(s.left));
  }
  if (s["_tag"] === "Right") {
    return Either.right(options.onSuccess(s.right));
  }
  return Effect.mapBoth(self, options);
});
/**
 * @category optimisation
 * @since 1.0.0
 */
const orElse = exports.orElse = /*#__PURE__*/(0, _Function.dual)(2, (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return f(s.left);
  }
  if (s["_tag"] === "Right") {
    return s;
  }
  return Effect.catchAll(self, f);
});
/* c8 ignore start */
//# sourceMappingURL=ParseResult.js.map