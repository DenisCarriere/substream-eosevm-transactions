/**
 * @since 1.0.0
 */
import * as Effect from "effect/Effect";
import * as Either from "effect/Either";
import { dual } from "effect/Function";
import * as Option from "effect/Option";
/** @internal */
export const flatMap = /*#__PURE__*/dual(2, (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return s;
  }
  if (s["_tag"] === "Right") {
    return f(s.right);
  }
  return Effect.flatMap(self, f);
});
/** @internal */
export const map = /*#__PURE__*/dual(2, (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return s;
  }
  if (s["_tag"] === "Right") {
    return Either.right(f(s.right));
  }
  return Effect.map(self, f);
});
/** @internal */
export const mapError = /*#__PURE__*/dual(2, (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return Either.left(f(s.left));
  }
  if (s["_tag"] === "Right") {
    return s;
  }
  return Effect.mapError(self, f);
});
/** @internal */
export const eitherOrUndefined = self => {
  const s = self;
  if (s["_tag"] === "Left" || s["_tag"] === "Right") {
    return s;
  }
};
/** @internal */
export const declaration = (ast, actual, error) => ({
  _tag: "Declaration",
  ast,
  actual,
  error
});
/** @internal */
export const refinement = (ast, actual, kind, error) => ({
  _tag: "Refinement",
  ast,
  actual,
  kind,
  error
});
/** @internal */
export const tuple = (ast, actual, errors) => ({
  _tag: "Tuple",
  ast,
  actual,
  errors
});
/** @internal */
export const index = (index, error) => ({
  _tag: "Index",
  index,
  error
});
/** @internal */
export const typeLiteral = (ast, actual, errors) => ({
  _tag: "TypeLiteral",
  ast,
  actual,
  errors
});
/** @internal */
export const key = (key, error) => ({
  _tag: "Key",
  key,
  error
});
/** @internal */
export const unexpected = ast => ({
  _tag: "Unexpected",
  ast
});
/** @internal */
export const transform = (ast, actual, kind, error) => ({
  _tag: "Transform",
  ast,
  actual,
  kind,
  error
});
/** @internal */
export const type = (ast, actual, message) => ({
  _tag: "Type",
  ast,
  actual,
  message: Option.fromNullable(message)
});
/** @internal */
export const forbidden = (ast, actual, message) => ({
  _tag: "Forbidden",
  ast,
  actual,
  message: Option.fromNullable(message)
});
/** @internal */
export const missing = {
  _tag: "Missing"
};
/** @internal */
export const member = (ast, error) => ({
  _tag: "Member",
  ast,
  error
});
/** @internal */
export const union = (ast, actual, errors) => ({
  _tag: "Union",
  ast,
  actual,
  errors
});
//# sourceMappingURL=parser.js.map