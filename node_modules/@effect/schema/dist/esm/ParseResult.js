/**
 * @since 1.0.0
 */
import { TaggedError } from "effect/Data";
import * as Effect from "effect/Effect";
import * as Either from "effect/Either";
import { dual } from "effect/Function";
import * as Inspectable from "effect/Inspectable";
import * as InternalParser from "./internal/parser.js";
import * as TreeFormatter from "./TreeFormatter.js";
/**
 * @since 1.0.0
 */
export class ParseError extends TaggedError("ParseError") {
  get message() {
    return this.toString();
  }
  /**
   * @since 1.0.0
   */
  toString() {
    return TreeFormatter.formatIssue(this.error);
  }
  /**
   * @since 1.0.0
   */
  toJSON() {
    return {
      _id: "ParseError",
      message: this.toString()
    };
  }
  /**
   * @since 1.0.0
   */
  [Inspectable.NodeInspectSymbol]() {
    return this.toJSON();
  }
}
/**
 * @category constructors
 * @since 1.0.0
 */
export const parseError = issue => new ParseError({
  error: issue
});
/**
 * @category constructors
 * @since 1.0.0
 */
export const succeed = Either.right;
/**
 * @category constructors
 * @since 1.0.0
 */
export const fail = Either.left;
const _try = Either.try;
export {
/**
 * @category constructors
 * @since 1.0.0
 */
_try as try };
/**
 * @category constructors
 * @since 1.0.0
 */
export const transform = InternalParser.transform;
/**
 * @category constructors
 * @since 1.0.0
 */
export const type = InternalParser.type;
/**
 * @category constructors
 * @since 1.0.0
 */
export const forbidden = InternalParser.forbidden;
/**
 * @category constructors
 * @since 1.0.0
 */
export const declaration = InternalParser.declaration;
/**
 * @category constructors
 * @since 1.0.0
 */
export const refinement = InternalParser.refinement;
/**
 * @category constructors
 * @since 1.0.0
 */
export const tuple = (ast, actual, errors) => ({
  _tag: "Tuple",
  ast,
  actual,
  errors
});
/**
 * @category constructors
 * @since 1.0.0
 */
export const typeLiteral = InternalParser.typeLiteral;
/**
 * @category constructors
 * @since 1.0.0
 */
export const index = InternalParser.index;
/**
 * @category constructors
 * @since 1.0.0
 */
export const key = InternalParser.key;
/**
 * @category constructors
 * @since 1.0.0
 */
export const missing = InternalParser.missing;
/**
 * @category constructors
 * @since 1.0.0
 */
export const unexpected = InternalParser.unexpected;
/**
 * @category constructors
 * @since 1.0.0
 */
export const union = InternalParser.union;
/**
 * @category constructors
 * @since 1.0.0
 */
export const member = InternalParser.member;
/**
 * @category optimisation
 * @since 1.0.0
 */
export const eitherOrUndefined = InternalParser.eitherOrUndefined;
/**
 * @category optimisation
 * @since 1.0.0
 */
export const flatMap = InternalParser.flatMap;
/**
 * @category optimisation
 * @since 1.0.0
 */
export const map = InternalParser.map;
/**
 * @category optimisation
 * @since 1.0.0
 */
export const mapError = InternalParser.mapError;
/**
 * @category optimisation
 * @since 1.0.0
 */
export const mapBoth = /*#__PURE__*/dual(2, (self, options) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return Either.left(options.onFailure(s.left));
  }
  if (s["_tag"] === "Right") {
    return Either.right(options.onSuccess(s.right));
  }
  return Effect.mapBoth(self, options);
});
/**
 * @category optimisation
 * @since 1.0.0
 */
export const orElse = /*#__PURE__*/dual(2, (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return f(s.left);
  }
  if (s["_tag"] === "Right") {
    return s;
  }
  return Effect.catchAll(self, f);
});
/* c8 ignore start */
export {
/**
 * @category decoding
 * @since 1.0.0
 */
decode,
/**
 * @category decoding
 * @since 1.0.0
 */
decodeUnknown,
/**
 * @category decoding
 * @since 1.0.0
 */
decodeUnknownEither,
/**
 * @category decoding
 * @since 1.0.0
 */
decodeUnknownOption,
/**
 * @category decoding
 * @since 1.0.0
 */
decodeUnknownPromise,
/**
 * @category decoding
 * @since 1.0.0
 */
decodeUnknownSync,
/**
 * @category encoding
 * @since 1.0.0
 */
encode,
/**
 * @category encoding
 * @since 1.0.0
 */
encodeUnknown,
/**
 * @category encoding
 * @since 1.0.0
 */
encodeUnknownEither,
/**
 * @category encoding
 * @since 1.0.0
 */
encodeUnknownOption,
/**
 * @category encoding
 * @since 1.0.0
 */
encodeUnknownPromise,
/**
 * @category encoding
 * @since 1.0.0
 */
encodeUnknownSync } from "./Parser.js";
//# sourceMappingURL=ParseResult.js.map